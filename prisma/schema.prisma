// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String                 @id @default(cuid())
  name            String?
  email           String?                @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole               @default(ATTENDEE)
  accounts        Account[]
  sessions        Session[]
  events          Event[]
  eventsAttending UsersAttendingEvents[]
  stripeAccountId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ORGANIZER
  ATTENDEE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELED
  POSTPONED
}

model Event {
  id          Int                    @id @default(autoincrement())
  eventName   String
  description String
  date        DateTime
  location    String
  lat         Float
  long        Float
  status      EventStatus            @default(PUBLISHED)
  organizer   User                   @relation(fields: [organizerId], references: [id])
  organizerId String
  users       UsersAttendingEvents[]
  category    EventCategory?         @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  imgUrl      String?                @default("https://placehold.co/600x400.png")
}

model UsersAttendingEvents {
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int // relation scalar field (used in the `@relation` attribute above)
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@id([eventId, userId])
}

model EventCategory {
  id    Int     @id @default(autoincrement())
  name  String
  Event Event[]
}
